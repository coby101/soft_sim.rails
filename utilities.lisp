;;;===========================================================================
;;; file:   src/generators/ror/utilities.lisp
;;; auth:   Coby Beck
;;; date:   2021-06
;;;
;;;---------------------------------------------------------------------------
;;;   code associated with generating a Ruby on Rails application
;;;---------------------------------------------------------------------------  
;;;
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package :ror)

(defun make-indent ()
  (ruby::make-indent))


(defun format-file-notice (stream function)
  (let* ((len (+ 2 (length function)))
         (hash-pad (make-string len :initial-element #\#))
         (space-pad (make-string len :initial-element #\Space)))
    (comment-out stream "~
###########################~a######################################## #
this file was generated by ~s. If you modify this file, please remove #
this header to make clear the generated content is now obsolete.~a    #
###########################~a######################################## #"
;               (local-time:format-timestring nil (local-time:now)
;                    :format *documentation-timestamp-format*)
               hash-pad function space-pad hash-pad)))

(defmethod uncountable-name? ((obj named-object))
  (string= (name obj) (plural obj)))

(defun comment-out (stream str &rest args)
  (apply #'ruby::comment-out stream str args))

(defun indent-block (stream str &rest args)
  (apply #'ruby::indent-block stream str args))

(defun comment-with-warning (stream str &rest args)
  (apply #'ruby::comment-with-warning stream str args))

(defun contains-constants-only (exp)
  (every #'(lambda (elt)
             (cond ((atom elt) (not (typep elt 'attribute)))
                   (t (contains-constants-only elt))))
         exp))

(defun contains-reachable-values? (exp context)
  (or (contains-constants-only exp)
      (let ((entity (typecase context
                      (entity context)
                      (relation (entity context))
                      (attribute (my-entity context)))))
        (every #'(lambda (elt)
                   (cond ((typep elt 'attribute)
                          (or (eq (my-entity elt) entity)
                              (path-to entity (my-entity elt))))
                         ((atom elt) (not (typep elt 'attribute)))
                         (t (contains-reachable-values? elt context))))
               exp))))
;;;===========================================================================
;;; Local variables:
;;; tab-width: 4
;;; indent-tabs-mode: nil
;;; End:
